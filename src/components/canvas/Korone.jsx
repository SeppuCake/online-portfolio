/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 public/inugami_korone_hololive/scene.gltf 
Author: chained_tan (https://sketchfab.com/ch_fren)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/inugami-korone-hololive-8b89fc7bb19c449baceb403a2995fd78
Title: Inugami Korone (hololive)
*/

import React, { useRef } from 'react'
import { Suspense, useEffect, useState } from 'react';
import { Canvas } from '@react-three/fiber';
import { OrbitControls, Preload, useGLTF, useAnimations } from '@react-three/drei';

import CanvasLoader from '../Loader';

const Korones = ({ isMobile }) => {
  const korone = useGLTF('./kedamaKorone/kedameKorone.gltf')
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('./kedamaKorone/kedameKorone.gltf')
  const { actions, names } = useAnimations(animations, group)

  return (
    <mesh>
      <hemisphereLight intensity={0.50} groundColor="black" />
      <pointLight intensity={20} position={[0, 1, 3]}/>
      <spotLight
        position={[0.5, 2, 0.5]}
        angle={0}
        penumbra={1}
        intensity={100}
        castShadow
        shadow-mapSize={1024}
      />
        <primitive
        object={korone.scene}
        scale={isMobile ? 0.5 : 2.5}
        position={isMobile ? [0, -12, 0] : [0, -2.5, 0]}
        rotation={[0, 0, 0]}
      />
    </mesh>
  )
}

const KoroneCanvas = () => {

  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    // Add a listener for changes to screen size here
    const mediaQuery = window.matchMedia('(max-width: 300px)');

    // Set init value of 'isMobile' state var
    setIsMobile(mediaQuery.matches);

    // Define a callback function to handle changes to media query
    const handleMediaQueryChange = (event) => {
      setIsMobile(event.matches);
    }

    // Add the callback function to a listener for changes to media query
    mediaQuery.addEventListener('change', handleMediaQueryChange);

    // Remove the listener when the component is unmounted
    return () => {
      mediaQuery.removeEventListener('change', handleMediaQueryChange);
    }
  }, [])

  return (
    <Canvas
      frameloop="demand"
      shadows
      camera={{ position: [0, 3, 5], fov: 50 }}
      gl={{ preserveDrawingBuffer: true }}
    >
      <Suspense fallback={<CanvasLoader />}>
        <OrbitControls
        enableZoom={false}
        autoRotate
        autoRotateSpeed={25}
        maxPolarAngle={Math.PI / 2}
        minPolarAngle={Math.PI / 2}
        />
        <Korones isMobile={isMobile} />
      </Suspense>

      <Preload all />
    </Canvas>
  )
}

/* const Korone = (props) => {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/scene.gltf')
  const { actions, names } = useAnimations(animations, group)

  useEffect(() => {
    actions[names[0]].reset().fadeIn(0.5).play();
  }, [])

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]} scale={1.848}>
          <group name="Root">
            <group name="Armature">
              <primitive object={nodes.Armature_rootJoint} />
              <group name="korobody" position={[0, 0, 0.083]} scale={0.394} />
              <skinnedMesh name="korobody_0" geometry={nodes.korobody_0.geometry} material={materials.yubi_mat} skeleton={nodes.korobody_0.skeleton} />
            </group>
          </group>
        </group>
      </group>
    </group>
  )
} */

export default KoroneCanvas

//useGLTF.preload('/scene.gltf');
